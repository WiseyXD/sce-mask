// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                 String              @id @default(cuid())
  username           String?             @unique
  email              String              @unique
  password           String
  isEmailVerified    Boolean             @default(false)
  image              String?
  department         String?
  yearOfAddmission   String?
  role               UserRole            @default(USER)
  accounts           Account[]
  sessions           Session[]
  emailVerifications EmailVerification[]
  posts              Post[]
  likedPosts         Like[]
  bookmarkedPosts    Bookmark[]
  comments           Comment[]
  commentLikes       CommentLike[]
  commentBookmarks   CommentBookmark[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  code      String
  createdAt DateTime @default(now())
}

model Post {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(references: [id], fields: [userId], onDelete: Cascade)
  text        String
  mediaLink   String?
  time        DateTime   @default(now())
  likeCount   Int        @default(0)
  bookmarks   Int        @default(0)
  likes       Like[]
  bookmarksBy Bookmark[]
  comments    Comment[]
}

model Comment {
  id               String            @id @default(cuid())
  userId           String
  user             User              @relation(references: [id], fields: [userId], onDelete: Cascade)
  postId           String?
  post             Post?             @relation(references: [id], fields: [postId], onDelete: Cascade)
  text             String?
  mediaLink        String?
  time             DateTime          @default(now())
  likeCount        Int               @default(0)
  bookmarks        Int               @default(0)
  parentCommentId  String?           // Field for parent comment
  parentComment    Comment?          @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies          Comment[]         @relation("CommentReplies")
  commentLikes     CommentLike[]
  commentBookmarks CommentBookmark[]
}


model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model CommentBookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
